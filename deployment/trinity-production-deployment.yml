# Trinity Agent Platform - Production Deployment Configuration
# Docker Compose for enterprise-grade production deployment

version: '3.8'

services:
  # Trinity Agent Platform Frontend
  trinity-frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.prod
    ports:
      - "443:443"
      - "80:80"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.trinity-agents.ai
      - NEXT_PUBLIC_WS_URL=wss://api.trinity-agents.ai
      - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
    volumes:
      - ../frontend/public:/app/public
      - trinity-logs:/var/log/nginx
    restart: always
    depends_on:
      - trinity-backend
    networks:
      - trinity-network

  # Trinity Agent Platform Backend
  trinity-backend:
    build:
      context: ..
      dockerfile: Dockerfile.production
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@trinity-postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://trinity-redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=https://trinity-agents.ai
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    volumes:
      - trinity-uploads:/app/uploads
      - trinity-logs:/app/logs
    restart: always
    depends_on:
      - trinity-postgres
      - trinity-redis
    networks:
      - trinity-network

  # PostgreSQL Database
  trinity-postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - trinity-postgres-data:/var/lib/postgresql/data
      - ../database/trinity-enterprise-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ../database/seed-data.sql:/docker-entrypoint-initdb.d/02-seed.sql
    ports:
      - "5432:5432"
    restart: always
    networks:
      - trinity-network

  # Redis Cache
  trinity-redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - trinity-redis-data:/data
    ports:
      - "6379:6379"
    restart: always
    networks:
      - trinity-network

  # Trinity Agent Workers (Oracle, Sentinel, Sage)
  trinity-oracle:
    build:
      context: ..
      dockerfile: Dockerfile.agents
    environment:
      - NODE_ENV=production
      - AGENT_TYPE=oracle
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@trinity-postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://trinity-redis:6379
    restart: always
    depends_on:
      - trinity-postgres
      - trinity-redis
    networks:
      - trinity-network

  trinity-sentinel:
    build:
      context: ..
      dockerfile: Dockerfile.agents
    environment:
      - NODE_ENV=production
      - AGENT_TYPE=sentinel
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@trinity-postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://trinity-redis:6379
    restart: always
    depends_on:
      - trinity-postgres
      - trinity-redis
    networks:
      - trinity-network

  trinity-sage:
    build:
      context: ..
      dockerfile: Dockerfile.agents
    environment:
      - NODE_ENV=production
      - AGENT_TYPE=sage
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@trinity-postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://trinity-redis:6379
    restart: always
    depends_on:
      - trinity-postgres
      - trinity-redis
    networks:
      - trinity-network

  # Monitoring & Observability
  trinity-monitoring:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - trinity-prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: always
    networks:
      - trinity-network

  trinity-grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - trinity-grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    restart: always
    networks:
      - trinity-network

  # Nginx Load Balancer
  trinity-nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - trinity-logs:/var/log/nginx
    restart: always
    depends_on:
      - trinity-frontend
      - trinity-backend
    networks:
      - trinity-network

volumes:
  trinity-postgres-data:
  trinity-redis-data:
  trinity-uploads:
  trinity-logs:
  trinity-prometheus-data:
  trinity-grafana-data:

networks:
  trinity-network:
    driver: bridge

# Health Checks Configuration
x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

# Resource Limits
x-resources: &default-resources
  deploy:
    resources:
      limits:
        cpus: '2'
        memory: 2G
      reservations:
        cpus: '0.5'
        memory: 512M