# OpenConductor MCP Worker Dockerfile
# Specialized container for MCP workflow execution

FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY src/ ./src/

# Build the application
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Install system dependencies for MCP servers
RUN apk add --no-cache \
    python3 \
    py3-pip \
    git \
    curl \
    bash \
    postgresql-client \
    redis

# Create app user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S worker -u 1001

# Set working directory
WORKDIR /app

# Copy built application
COPY --from=builder --chown=worker:nodejs /app/dist ./dist
COPY --from=builder --chown=worker:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=worker:nodejs /app/package*.json ./

# Copy MCP worker entry point
COPY src/mcp/worker-entry.js ./worker-entry.js

# Create necessary directories
RUN mkdir -p /app/logs /app/temp && \
    chown -R worker:nodejs /app

# Switch to non-root user
USER worker

# Environment variables
ENV NODE_ENV=production
ENV WORKER_TYPE=mcp_execution
ENV WORKER_CONCURRENCY=5
ENV LOG_LEVEL=info

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD node -e "console.log('Worker healthy')" || exit 1

# Expose monitoring port
EXPOSE 9001

# Start the worker
CMD ["node", "worker-entry.js"]