name: Frontend Deployment (Vercel)

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-deployment.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'frontend/**'

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Test and lint frontend code
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run type-check

      - name: Run linting
        run: npm run lint

      - name: Run build test
        run: npm run build
        env:
          VITE_API_BASE_URL: https://api-staging.openconductor.ai
          VITE_WEBSOCKET_URL: wss://api-staging.openconductor.ai/ws

  # Deploy to Vercel Preview (for PRs and develop branch)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: test-frontend
    if: github.ref != 'refs/heads/main'
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview_url=$url" >> $GITHUB_OUTPUT

      - name: Comment PR with Preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Frontend Preview Deployed!**
              
              **Preview URL:** ${{ steps.deploy.outputs.preview_url }}
              
              ‚úÖ Frontend changes are ready for review.`
            })

  # Deploy to Production (main branch only)
  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: test-frontend
    if: github.ref == 'refs/heads/main'
    environment: production
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production_url=$url" >> $GITHUB_OUTPUT

      - name: Run Post-Deployment Health Check
        run: |
          sleep 30  # Wait for deployment to be live
          curl -f ${{ steps.deploy.outputs.production_url }}/health || exit 1

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "‚úÖ Frontend successfully deployed to production"
          echo "üåê Production URL: ${{ steps.deploy.outputs.production_url }}"

      - name: Create Deployment Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: status,
              environment_url: '${{ steps.deploy.outputs.production_url }}',
              description: `Frontend deployment ${status}`
            });

  # Cleanup old preview deployments
  cleanup-previews:
    name: Cleanup Old Previews
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Delete Preview Deployment
        run: |
          vercel ls --token=${{ secrets.VERCEL_TOKEN }} \
            | grep "pr-${{ github.event.pull_request.number }}" \
            | awk '{print $2}' \
            | xargs -r -I {} vercel rm {} --yes --token=${{ secrets.VERCEL_TOKEN }}