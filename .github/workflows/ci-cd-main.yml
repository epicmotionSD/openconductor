name: OpenConductor CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  # Detect changes to determine what to deploy
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      database: ${{ steps.changes.outputs.database }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changes
        id: changes
        run: |
          # Check for frontend changes
          if git diff --name-only HEAD~1 HEAD | grep -E '^frontend/|\.github/workflows/frontend-'; then
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for backend changes
          if git diff --name-only HEAD~1 HEAD | grep -E '^src/|^package\.json|^Dockerfile|\.github/workflows/backend-'; then
            echo "backend=true" >> $GITHUB_OUTPUT
          else
            echo "backend=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for database changes
          if git diff --name-only HEAD~1 HEAD | grep -E '^database/'; then
            echo "database=true" >> $GITHUB_OUTPUT
          else
            echo "database=false" >> $GITHUB_OUTPUT
          fi

  # Run security checks first
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level high
          npm audit fix --dry-run

      - name: Check for hardcoded secrets
        run: |
          # Check for common secret patterns
          if grep -r -E "(sk_live_|sk_test_|pk_live_|pk_test_)" src/ --exclude-dir=node_modules; then
            echo "❌ Potential API keys found in source code"
            exit 1
          fi
          
          if grep -r -E "(password|secret|key).*=.*['\"][\w]{20,}" src/ --exclude-dir=node_modules; then
            echo "❌ Potential hardcoded secrets found"
            exit 1
          fi
          
          echo "✅ No hardcoded secrets detected"

      - name: SAST Scan with CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'javascript,typescript'

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Call frontend deployment workflow
  deploy-frontend:
    name: Deploy Frontend
    needs: [detect-changes, security-scan]
    if: needs.detect-changes.outputs.frontend == 'true'
    uses: ./.github/workflows/frontend-deployment.yml
    secrets: inherit

  # Call backend deployment workflow
  deploy-backend:
    name: Deploy Backend
    needs: [detect-changes, security-scan]
    if: needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.database == 'true'
    uses: ./.github/workflows/backend-deployment.yml
    secrets: inherit

  # Integration tests after deployments
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: always() && (needs.deploy-frontend.result == 'success' || needs.deploy-backend.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for deployments to be live
        run: |
          echo "⏳ Waiting for deployments to be fully live..."
          sleep 60

      - name: Run end-to-end tests
        run: |
          # Set environment URLs based on branch
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            export FRONTEND_URL="${{ secrets.PRODUCTION_FRONTEND_URL }}"
            export BACKEND_URL="${{ secrets.RAILWAY_PRODUCTION_URL }}"
          else
            export FRONTEND_URL="${{ secrets.STAGING_FRONTEND_URL }}"
            export BACKEND_URL="${{ secrets.RAILWAY_STAGING_URL }}"
          fi
          
          echo "🧪 Running integration tests..."
          echo "Frontend: $FRONTEND_URL"
          echo "Backend: $BACKEND_URL"
          
          # Test frontend is accessible
          curl -f "$FRONTEND_URL" || exit 1
          
          # Test backend health
          curl -f "$BACKEND_URL/health" || exit 1
          
          # Test MCP API endpoints
          curl -f "$BACKEND_URL/api/v1/mcp/servers?limit=1" || exit 1
          
          # Test WebSocket connection (basic check)
          npm run test:websocket || true
        env:
          NODE_ENV: test

      - name: Performance tests
        run: |
          echo "⚡ Running performance tests..."
          
          # Frontend performance
          if command -v lighthouse &> /dev/null; then
            lighthouse --only-categories=performance --chrome-flags="--headless" "$FRONTEND_URL" --output json --output-path lighthouse-results.json
            
            # Check performance score
            PERF_SCORE=$(node -e "console.log(JSON.parse(require('fs').readFileSync('lighthouse-results.json')).categories.performance.score * 100)")
            if (( $(echo "$PERF_SCORE < 80" | bc -l) )); then
              echo "⚠️ Performance score below 80: $PERF_SCORE"
            else
              echo "✅ Performance score: $PERF_SCORE"
            fi
          fi
          
          # Backend performance (response times)
          time curl -f "$BACKEND_URL/api/v1/mcp/servers?limit=1"

  # Notify deployment status
  notify-status:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend, integration-tests]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Determine overall status
        id: status
        run: |
          frontend_result="${{ needs.deploy-frontend.result }}"
          backend_result="${{ needs.deploy-backend.result }}"
          tests_result="${{ needs.integration-tests.result }}"
          
          if [[ "$frontend_result" == "success" && "$backend_result" == "success" && "$tests_result" == "success" ]]; then
            echo "status=✅ SUCCESS" >> $GITHUB_OUTPUT
            echo "emoji=🚀" >> $GITHUB_OUTPUT
          else
            echo "status=❌ FAILED" >> $GITHUB_OUTPUT
            echo "emoji=🚨" >> $GITHUB_OUTPUT
          fi

      - name: Create deployment summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # ${{ steps.status.outputs.emoji }} OpenConductor Deployment Summary
          
          ## Deployment Results
          - **Frontend Deployment**: ${{ needs.deploy-frontend.result || 'skipped' }}
          - **Backend Deployment**: ${{ needs.deploy-backend.result || 'skipped' }}  
          - **Integration Tests**: ${{ needs.integration-tests.result || 'skipped' }}
          
          ## Environment URLs
          - **Frontend**: ${{ secrets.PRODUCTION_FRONTEND_URL }}
          - **Backend**: ${{ secrets.RAILWAY_PRODUCTION_URL }}
          - **Health Check**: ${{ secrets.RAILWAY_PRODUCTION_URL }}/health
          
          ## Deployment Details
          - **Commit**: \`${{ github.sha }}\`
          - **Branch**: \`${{ github.ref_name }}\`
          - **Triggered by**: ${{ github.actor }}
          - **Timestamp**: $(date -u)
          
          ## Next Steps
          ${
            if [[ "${{ steps.status.outputs.status }}" == *"SUCCESS"* ]]; then
              echo "- ✅ All systems operational"
              echo "- 📊 Monitor application metrics"
              echo "- 🔍 Review deployment logs if needed"
            else
              echo "- ❌ Review failed components"
              echo "- 🔧 Check error logs and fix issues"
              echo "- 🔄 Trigger manual rollback if necessary"
            fi
          }
          EOF

      - name: Post status to commit
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ steps.status.outputs.status }}';
            const emoji = '${{ steps.status.outputs.emoji }}';
            
            const message = `${emoji} **OpenConductor Deployment ${status}**
            
            **Frontend**: ${{ needs.deploy-frontend.result || 'skipped' }}
            **Backend**: ${{ needs.deploy-backend.result || 'skipped' }}
            **Tests**: ${{ needs.integration-tests.result || 'skipped' }}
            
            **Live URLs:**
            - Frontend: ${{ secrets.PRODUCTION_FRONTEND_URL }}
            - Backend: ${{ secrets.RAILWAY_PRODUCTION_URL }}
            `;
            
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: message
            });